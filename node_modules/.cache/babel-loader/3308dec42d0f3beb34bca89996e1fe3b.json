{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\nelson\\\\Desktop\\\\turismoov\\\\src\\\\components\\\\ensayos\\\\llamadaAUnaApi.js\";\nimport React from 'react';\nimport TarjetaRick from './tarjetaRick';\nimport { domainToASCII } from 'url';\n\nclass LlamarApi extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      nextPage: 1,\n      loading: true,\n      error: null,\n      data: {\n        results: []\n      }\n    };\n\n    this.fetchCharacters = async () => {\n      // antes de hacer cualquier cosa, especificamos los estados loading y error del componente\n      this.setState({\n        loading: true,\n        error: null\n      });\n\n      try {\n        const response = await fetch(\"https://rickandmortyapi.com/api/character?page=\".concat(this.state.nextPage));\n        const data = await response.json(); // aca se modifica el estado del componente con los datos recibidos\n\n        this.setState({\n          nextPage: this.state.nextPage + 1,\n          loading: false,\n          data: {\n            info: data.info,\n            results: [].concat(this.state.data.results, data.results)\n          }\n        });\n      } catch (error) {\n        // En caso de que falle la carga de datos, se maneja el error\n        this.setState({\n          loading: false,\n          error: error\n        });\n      }\n    };\n  }\n\n  componentDidMount() {\n    this.fetchCharacters();\n  }\n\n  render() {\n    // el siguiente if es para manejar el caso de que falle la carga de datos\n    if (this.state.error) {\n      return \"Error: \".concat(this.state.error.message);\n    }\n\n    return React.createElement(\"div\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, \"hola mundo\"), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, this.state.data.results.map(muneco => React.createElement(\"li\", {\n      key: muneco.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, React.createElement(TarjetaRick, {\n      data: muneco,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    })))), this.state.loading && React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, \"cargando esta vaina\"), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, !this.state.loading && React.createElement(\"button\", {\n      onClick: this.fetchCharacters,\n      className: \"waves-effect waves-light btn\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, \"load more\")));\n  }\n\n}\n\nexport default LlamarApi;","map":{"version":3,"sources":["C:\\Users\\nelson\\Desktop\\turismoov\\src\\components\\ensayos\\llamadaAUnaApi.js"],"names":["React","TarjetaRick","domainToASCII","LlamarApi","Component","state","nextPage","loading","error","data","results","fetchCharacters","setState","response","fetch","json","info","concat","componentDidMount","render","message","map","muneco","id"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,SAASC,aAAT,QAA8B,KAA9B;;AAGA,MAAMC,SAAN,SAAwBH,KAAK,CAACI,SAA9B,CAAuC;AAAA;AAAA;AAAA,SAInCC,KAJmC,GAI3B;AACJC,MAAAA,QAAQ,EAAC,CADL;AAEJC,MAAAA,OAAO,EAAC,IAFJ;AAGJC,MAAAA,KAAK,EAAC,IAHF;AAILC,MAAAA,IAAI,EAAE;AACFC,QAAAA,OAAO,EAAE;AADP;AAJD,KAJ2B;;AAAA,SAiBnCC,eAjBmC,GAiBjB,YAAY;AAC1B;AACA,WAAKC,QAAL,CAAc;AAACL,QAAAA,OAAO,EAAC,IAAT;AAAeC,QAAAA,KAAK,EAAE;AAAtB,OAAd;;AAEA,UAAG;AACC,cAAMK,QAAQ,GAAG,MAAMC,KAAK,0DAAmD,KAAKT,KAAL,CAAWC,QAA9D,EAA5B;AACA,cAAMG,IAAI,GAAG,MAAMI,QAAQ,CAACE,IAAT,EAAnB,CAFD,CAGC;;AACA,aAAKH,QAAL,CAAc;AACVN,UAAAA,QAAQ,EAAE,KAAKD,KAAL,CAAWC,QAAX,GAAqB,CADrB;AAEVC,UAAAA,OAAO,EAAC,KAFE;AAGVE,UAAAA,IAAI,EAAC;AACDO,YAAAA,IAAI,EAAEP,IAAI,CAACO,IADV;AAEDN,YAAAA,OAAO,EAAE,GAAGO,MAAH,CAAU,KAAKZ,KAAL,CAAWI,IAAX,CAAgBC,OAA1B,EAAmCD,IAAI,CAACC,OAAxC;AAFR;AAHK,SAAd;AAUH,OAdD,CAcE,OAAOF,KAAP,EAAa;AACX;AACA,aAAKI,QAAL,CAAc;AACVL,UAAAA,OAAO,EAAC,KADE;AAEVC,UAAAA,KAAK,EAACA;AAFI,SAAd;AAKH;AAEJ,KA5CkC;AAAA;;AAanCU,EAAAA,iBAAiB,GAAG;AAChB,SAAKP,eAAL;AACH;;AA8BDQ,EAAAA,MAAM,GAAG;AACL;AACA,QAAG,KAAKd,KAAL,CAAWG,KAAd,EAAqB;AACjB,8BAAiB,KAAKH,KAAL,CAAWG,KAAX,CAAiBY,OAAlC;AACH;;AACD,WACI;AAAK,MAAA,SAAS,EAAE,KAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADJ,EAGQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACM,KAAKf,KAAL,CAAWI,IAAX,CAAgBC,OAAhB,CAAwBW,GAAxB,CAA4BC,MAAM,IAC/B;AAAI,MAAA,GAAG,EAAGA,MAAM,CAACC,EAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,WAAD;AAAa,MAAA,IAAI,EAAID,MAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CADH,CADN,CAHR,EAeK,KAAKjB,KAAL,CAAWE,OAAX,IACG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BAhBR,EAqBI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACM,CAAC,KAAKF,KAAL,CAAWE,OAAZ,IACF;AAAQ,MAAA,OAAO,EAAI,KAAKI,eAAxB;AAAyC,MAAA,SAAS,EAAC,8BAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAFJ,CArBJ,CADJ;AAiCH;;AAnFkC;;AAsFvC,eAAeR,SAAf","sourcesContent":["import React from 'react'\r\nimport TarjetaRick from './tarjetaRick'\r\nimport { domainToASCII } from 'url'\r\n\r\n\r\nclass LlamarApi extends React.Component{\r\n\r\n    // Debemos manejar los estados de una carga, que son loading, error y datos, los cuales se especifican en el estado del componente\r\n\r\n    state = {\r\n        nextPage:1,\r\n        loading:true,\r\n        error:null,\r\n       data: {\r\n           results: []\r\n       }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.fetchCharacters()\r\n    }\r\n\r\n    fetchCharacters = async () => {\r\n        // antes de hacer cualquier cosa, especificamos los estados loading y error del componente\r\n        this.setState({loading:true, error: null})\r\n\r\n        try{\r\n            const response = await fetch(`https://rickandmortyapi.com/api/character?page=${this.state.nextPage}`)\r\n            const data = await response.json()\r\n            // aca se modifica el estado del componente con los datos recibidos\r\n            this.setState({\r\n                nextPage: this.state.nextPage +1,\r\n                loading:false, \r\n                data:{\r\n                    info: data.info,\r\n                    results: [].concat(this.state.data.results, data.results)\r\n                },\r\n                \r\n            })\r\n\r\n        } catch (error){\r\n            // En caso de que falle la carga de datos, se maneja el error\r\n            this.setState({\r\n                loading:false, \r\n                error:error\r\n            })\r\n\r\n        }\r\n        \r\n    }\r\n    render() {\r\n        // el siguiente if es para manejar el caso de que falle la carga de datos\r\n        if(this.state.error) {\r\n            return `Error: ${this.state.error.message}`\r\n        }\r\n        return(\r\n            <div className= 'row'>\r\n                <h1>hola mundo</h1>\r\n                \r\n                    <div>\r\n                         {this.state.data.results.map(muneco => (\r\n                             <li key= {muneco.id}>\r\n                                 <TarjetaRick data = {muneco}/>\r\n                             </li>\r\n                             \r\n                         ))\r\n                         }\r\n                    </div>\r\n\r\n                    {/* el siguiente c√≥digo es una condicional que dice que si el estado esta en cargando, mostrar\r\n                    lo que esta en <h1>, es decir un loading */}\r\n                {this.state.loading && (\r\n                    <h1>cargando esta vaina</h1>\r\n                )}\r\n\r\n                {/* aca vamos a mostrar un boton solamente cuando el estado loading sea falso */}\r\n\r\n                <div>\r\n                     {!this.state.loading && (\r\n                    <button onClick = {this.fetchCharacters} className=\"waves-effect waves-light btn\">load more</button>\r\n                ) }\r\n                </div>\r\n\r\n               \r\n                    \r\n                \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default LlamarApi"]},"metadata":{},"sourceType":"module"}